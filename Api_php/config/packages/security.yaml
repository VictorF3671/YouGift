security:
    password_hashers:
        App\Entity\Usuario:
            algorithm: auto

    providers:
        app_user_provider:
            id: App\Repository\AuthUsuarioRepository

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/auth/login$
            stateless: true
            json_login:
                check_path: /auth/login
                username_path: email
                password_path: senha
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~

    access_control:
        - { path: ^/usuario/listar-todos, roles: ROLE_ADMIN }
        - { path: ^/usuario/listar, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/usuario/atualizar, roles: ROLE_ADMIN }
        - { path: ^/usuario/remover, roles: ROLE_ADMIN }
        - { path: ^/auth/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/auth/registrar-usuario, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    
    role_hierarchy:
        ROLE_ADMIN: ROLE_ADMIN
        ROLE_USER: ROLE_USER
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon